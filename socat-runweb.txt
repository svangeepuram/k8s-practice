#!/bin/bash -x
export PORT="${1:-80}"
export NAMESPACE="${2:-default}"
echo "PORT: ${PORT}"
echo "Namespace: ${NAMESPACE}"
kubectl delete -n ${NAMESPACE} pod socat-web --force --grace-period=0
kubectl delete -n ${NAMESPACE} svc socat-web
cat socat-web-template.yaml |awk 'BEGIN {port = ENVIRON["PORT"];namespace=ENVIRON["NAMESPACE"]}{ sub(/__SOCAT_PORT__/,port,$0);sub(/__NAMESPACE__/,namespace,$0); print $0}' | tee socat-web.yaml
sleep 2
yamllint socat-web.yaml
kubectl apply --record -f socat-web.yaml
if (($? == 0)); then
    kubectl expose -n ${NAMESPACE} pod socat-web --port=80 --target-port=web
    echo "======================================"
    kubectl get svc socat-web -n ${NAMESPACE} 
    echo "======================================"
    kubectl get ep socat-web -n ${NAMESPACE} 
    sleep 3
    echo "======================================"
    kubectl logs socat-web -n ${NAMESPACE} 
    echo "======================================"
    sleep 3
    for i in {1..3}
    do
    echo counter ${i}
    curl --dns-servers 10.96.0.10 socat-web.${NAMESPACE}.svc.cluster.local
    done

    #kubectl run busybox-$RANDOM --image=busybox:1.28 --rm -it -- /bin/sh -c wget -qO- http://socat-web.${NAMESPACE}.svc.cluster.local
fi
====
cat socat-web-template.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: socat-web
  namespace: __NAMESPACE__
  labels:
    purpose: dynamic-port
spec:
  containers:
  - name: socat-web
    image: alpine/socat
    ports:
    - name: web
      protocol: TCP
      containerPort: __SOCAT_PORT__
    command: [ "/bin/sh", "-c", "socat  -v -d -d TCP-LISTEN:__SOCAT_PORT__,crlf,reuseaddr,fork SYSTEM:\"echo HTTP/1.1 200 OK; echo Content-Type\\: text/plain; echo ;echo \\\"Hola... Bienvenidos to the world of sockets...\\\";echo \\\"Server: \\$SOCAT_SOCKADDR:\\$SOCAT_SOCKPORT\\\";echo \\\"Server: \\$SOCAT_PEERADDR:\\$SOCAT_PEERPORT\\\";\"" ]
  restartPolicy: OnFailure
  ===
  cat socat-web.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: socat-web
  namespace: fubar
  labels:
    purpose: dynamic-port
spec:
  containers:
  - name: socat-web
    image: alpine/socat
    ports:
    - name: web
      protocol: TCP
      containerPort: 8888
    command: [ "/bin/sh", "-c", "socat  -v -d -d TCP-LISTEN:8888,crlf,reuseaddr,fork SYSTEM:\"echo HTTP/1.1 200 OK; echo Content-Type\\: text/plain; echo ;echo \\\"Hola... Bienvenidos to the world of sockets...\\\";echo \\\"Server: \\$SOCAT_SOCKADDR:\\$SOCAT_SOCKPORT\\\";echo \\\"Server: \\$SOCAT_PEERADDR:\\$SOCAT_PEERPORT\\\";\"" ]
  restartPolicy: OnFailure
