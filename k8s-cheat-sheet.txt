Run pod :

kubectl run nginx1 --image=nginx:1.16 --port=8080 --hostport=80 --env="DNS_DOMAIN=cluster" 
 --restart=Never -l=tier=web  --expose=true --limits='cpu=200m,memory=512Mi' --requests='cpu=100m,memory=256Mi' 
 --save-config --command -- /bin/bash -c "sleep 1000" --dry-run=client -o yaml

kubectl exec nginx1 -i --tty -- sh


kkubectl create deploy web-deploy --image=nginx --port=8080 --replicas=3  --save-config --validate=true --dry-run=client -o yaml
aapiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"kind":"Deployment","apiVersion":"apps/v1","metadata":{"name":"web-deploy","creationTimestamp":null,"labels":{"app":"web-deploy"}},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"web-deploy"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"web-deploy"}},"spec":{"containers":[{"name":"nginx","image":"nginx","ports":[{"containerPort":8080}],"resources":{}}]}},"strategy":{}},"status":{}}
  creationTimestamp: null
  labels:
    app: web-deploy
  name: web-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-deploy
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: web-deploy
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 8080
        resources: {}
status: {}
============
kubectl create job myjob --image=nginx --save-config --validate -o yaml  --dry-run=client -- date
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"kind":"Job","apiVersion":"batch/v1","metadata":{"name":"myjob","creationTimestamp":null},"spec":{"template":{"metadata":{"creationTimestamp":null},"spec":{"containers":[{"name":"myjob","image":"nginx","command":["date"],"resources":{}}],"restartPolicy":"Never"}}},"status":{}}
  creationTimestamp: null
  name: myjob
spec:
  template:
    metadata:
      creationTimestamp: null
    spec:
      containers:
      - command:
        - date
        image: nginx
        name: myjob
        resources: {}
      restartPolicy: Never
status: {}
====
kubectl create cronjob cronjob1 --image=nginx --schedule="*/10 * * * *" --restart=OnFailure --save-config --validate=true  --dry-run=client -o yaml -- date
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"kind":"CronJob","apiVersion":"batch/v1beta1","metadata":{"name":"cronjob1","creationTimestamp":null},"spec":{"schedule":"*/10 * * * *","jobTemplate":{"metadata":{"name":"cronjob1","creationTimestamp":null},"spec":{"template":{"metadata":{"creationTimestamp":null},"spec":{"containers":[{"name":"cronjob1","image":"nginx","command":["date"],"resources":{}}],"restartPolicy":"OnFailure"}}}}},"status":{}}
  creationTimestamp: null
  name: cronjob1
spec:
  jobTemplate:
    metadata:
      creationTimestamp: null
      name: cronjob1
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - command:
            - date
            image: nginx
            name: cronjob1
            resources: {}
          restartPolicy: OnFailure
  schedule: '*/10 * * * *'
status: {}
ubuntu@master:
===

kubectl create job test-job --from=cronjob/cronjob1
==
kubectl create ns sales --save-config --validate=true
kubectl label ns/sales env=prod
kubectl get ns sales -oyaml

==
k create service clusterip web-svc --tcp 8080:8080 --clusterip=10.96.0.20 --dry-run=client -oyaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: web-svc
  name: web-svc
spec:
  clusterIP: 10.96.0.20
  ports:
  - name: 8080-8080
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: web-svc
  type: ClusterIP
status:
  loadBalancer: {}
 ====
k create service clusterip headless-web-svc --tcp 8080:8080 --clusterip="None" --dry-run=client -oyaml
kubectl create service nodeport my-nodeport-svc --tcp=5678:8080 --node-port=32323 --dry-run=client -oyaml
===
kubectl create service externalname  my-external-svc --tcp=8080:8080 --external-name="rest-svc.company.com" --dry-run=client -oyaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: my-external-svc
  name: my-external-svc
spec:
  externalName: rest-svc.company.com
  selector:
    app: my-external-svc
  type: ExternalName
status:
  loadBalancer: {}
==
kubectl create service loadbalancer my-lbs --tcp=5678:8080 --dry-run=client -oyaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: my-lbs
  name: my-lbs
spec:
  ports:
  - name: 5678-8080
    port: 5678
    protocol: TCP
    targetPort: 8080
  selector:
    app: my-lbs
  type: LoadBalancer
status:
  loadBalancer: {}
  ==
  
