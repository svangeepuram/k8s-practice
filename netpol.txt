
Allow ingress - pod selector :

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: "true"


tester:

Persistent tester :
kubectl run busybox --image=busybox -- sleep 1000
kubecctl  exec busybox -it -- wget --spider --timeout=1 nginx

Test without label : it should not work
kubectl run busybox --rm -ti --image=busybox -- wget --spider --timeout=1 nginx

Test with label : It should work 
kubectl run busybox --rm -ti --labels="access=true" --image=busybox --  wget --spider --timeout=1 nginx
kubectl run busybox --rm -ti --labels="access=true" --image=busybox --  wget -qO - --timeout=1 nginx
========

Allow ingress based on podSelector:

kubectl apply -f - <<EOF
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: api-allow
spec:
  podSelector:
    matchLabels:
      app: bookstore
      role: api
  ingress:
  - from:
      - podSelector:
          matchLabels:
            app: bookstore
 EOF
 
 Target pod :
 kubectl run apiserver --image=nginx --labels app=bookstore,role=api --expose --port 80
 
1. Tester pod without required lable ...it would fail:

kubectl run --generator=run-pod/v1 test-$RANDOM --rm -i -t --image=alpine -- wget -qO- --timeout=2 http://apiserver

2. Tester pod with required lable ...it would work: 

kubectl run test-$RANDOM --rm -i -t --image=alpine --labels app=bookstore,role=frontend -- wget -qO- --timeout=2 http://apiserver

Cleanup:
kubectl delete pod apiserver
kubectl delete service apiserver
kubectl delete networkpolicy api-allow

=========

Allow all on top of deny all voids deny all ...

1. 
kubectl apply -f - <<EOF
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-deny-all
spec:
  podSelector:
    matchLabels:
      app: web
  ingress: []
EOF

2. 

kubectl apply -f - <<EOF
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-allow-all
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: web
  ingress:
  - {}
EOF

Alternately Empty ingress its equivalent to allow all namespaces/pods

kubectl apply -f - <<EOF
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-allow-all
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: web
  ingress:
  - from:
    podSelector: {}
    namespaceSelector: {}
EOF

Tester: It should work, since traffic is allowed
kubectl run web --image=nginx --labels=app=web --expose --port 80
kubectl run test-$RANDOM --rm -i -t --image=alpine --  wget -qO- --timeout=2 http://web

Cleanup:
kubectl delete pod,service web
kubectl delete networkpolicy web-allow-all web-deny-all

==========
deny ingress :

Target pod/service :
kubectl run web --image=nginx --labels app=web --expose --port 80

Tester: it should work
kubectl run --generator=run-pod/v1 --rm -i -t --image=alpine test-$RANDOM -- wget -qO- http://web

kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
spec:
  podSelector: {}
  policyTypes:
  - Ingress
EOF

Tester: It should fail due to the fact that ingress to target is denied.

kubectl run --generator=run-pod/v1 --rm -i -t --image=alpine test-$RANDOM --wget -qO- --timeout=2 http://web

cleanup:
kubectl delete pod web
kubectl delete service web
kubectl delete networkpolicy web-deny-all

=======

Allow all ingress:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-ingress
spec:
  podSelector: {}
  ingress:
  - {}
  policyTypes:
  - Ingress
=====

Deny All egress:

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-egress
spec:
  podSelector: {}
  policyTypes:
  - Egress
 
 ===========================
 Allow all egress:
 
 ---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  egress:
  - {}
  policyTypes:
  - Egress
  
========

Denny all ingress/egress:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  


=========

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
 =======================
 

========
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
    - podSelector:
        matchLabels:
          role: frontend
    ports:
    - protocol: TCP
      port: 6379
  egress:
  - to:
    - ipBlock:
        cidr: 10.0.0.0/24
    ports:
    - protocol: TCP
      port: 5978
      

====
cat <<EOF | kubectl apply -f -
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
      app: web
  policyTypes:
  - Ingress
  - Egress  
  ingress:
  - from:
    - ipBlock:
        cidr: 172.17.0.0/16
        except:
        - 172.17.1.0/24
        - 172.17.2.0/24
    - ipBlock:
        cidr: 172.27.0.0/16
        except:
        - 172.27.1.0/24
        - 172.27.2.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
          envt: test
    - namespaceSelector:
        matchLabels:
          project: yourproject
          envt: qa
    - podSelector:
        matchLabels:
          role: frontend
          envt: test
    - podSelector:
        matchLabels:
          role: backend
          envt: qa
    ports:
    - protocol: TCP
      port: 6379
    - protocol: UDP
      port: 6379
  - from:
    - ipBlock:
        cidr: 172.18.0.0/16
        except:
        - 172.18.1.0/24
        - 172.18.2.0/24
    - ipBlock:
        cidr: 172.28.0.0/16
        except:
        - 172.28.1.0/24
        - 172.28.2.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject1
          envt: test1
    - namespaceSelector:
        matchLabels:
          project: yourproject1
          envt: qa1
    - podSelector:
        matchLabels:
          role: frontend1
          envt: test1
    - podSelector:
        matchLabels:
          role: backend1
          envt: qa1
    ports:
    - protocol: TCP
      port: 6380
    - protocol: UDP
      port: 6380
  egress:
  - to:
    - ipBlock:
        cidr: 172.57.0.0/16
        except:
        - 172.57.1.0/24
        - 172.57.2.0/24
    - ipBlock:
        cidr: 172.58.0.0/16
        except:
        - 172.58.1.0/24
        - 172.58.2.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject
          envt: test
    - namespaceSelector:
        matchLabels:
          project: yourproject
          envt: qa
    - podSelector:
        matchLabels:
          role: frontend
          envt: test
    - podSelector:
        matchLabels:
          role: backend
          envt: qa
    ports:
    - protocol: TCP
      port: 6379
    - protocol: UDP
      port: 6379
  - to:
    - ipBlock:
        cidr: 172.59.0.0/16
        except:
        - 172.59.1.0/24
        - 172.59.2.0/24
    - ipBlock:
        cidr: 172.60.0.0/16
        except:
        - 172.60.1.0/24
        - 172.60.2.0/24
    - namespaceSelector:
        matchLabels:
          project: myproject2
          envt: test2
    - namespaceSelector:
        matchLabels:
          project: yourproject2
          envt: qa2
    - podSelector:
        matchLabels:
          role: frontend2
          envt: test2
    - podSelector:
        matchLabels:
          role: backend2
          envt: qa2
    ports:
    - protocol: TCP
      port: 6381
    - protocol: UDP
      port: 6381
EOF

====
controlplane $ kubectl describe netpol test-network-policy
Name:         test-network-policy
Namespace:    default
Created on:   2020-11-22 21:18:23 +0000 UTC
Labels:       <none>
Annotations:  Spec:
  PodSelector:     app=web,role=db
  Allowing ingress traffic:
    To Port: 6379/TCP
    To Port: 6379/UDP
    From:
      IPBlock:
        CIDR: 172.17.0.0/16
        Except: 172.17.1.0/24, 172.17.2.0/24
    From:
      IPBlock:
        CIDR: 172.27.0.0/16
        Except: 172.27.1.0/24, 172.27.2.0/24
    From:
      NamespaceSelector: envt=test,project=myproject
    From:
      NamespaceSelector: envt=qa,project=yourproject
    From:
      PodSelector: envt=test,role=frontend
    From:
      PodSelector: envt=qa,role=backend
    ----------
    To Port: 6380/TCP
    To Port: 6380/UDP
    From:
      IPBlock:
        CIDR: 172.18.0.0/16
        Except: 172.18.1.0/24, 172.18.2.0/24
    From:
      IPBlock:
        CIDR: 172.28.0.0/16
        Except: 172.28.1.0/24, 172.28.2.0/24
    From:
      NamespaceSelector: envt=test1,project=myproject1
    From:
      NamespaceSelector: envt=qa1,project=yourproject1
    From:
      PodSelector: envt=test1,role=frontend1
    From:
      PodSelector: envt=qa1,role=backend1
  Allowing egress traffic:
    To Port: 6379/TCP
    To Port: 6379/UDP
    To:
      IPBlock:
        CIDR: 172.57.0.0/16
        Except: 172.57.1.0/24, 172.57.2.0/24
    To:
      IPBlock:
        CIDR: 172.58.0.0/16
        Except: 172.58.1.0/24, 172.58.2.0/24
    To:
      NamespaceSelector: envt=test,project=myproject
    To:
      NamespaceSelector: envt=qa,project=yourproject
    To:
      PodSelector: envt=test,role=frontend
    To:
      PodSelector: envt=qa,role=backend
    ----------
    To Port: 6381/TCP
    To Port: 6381/UDP
    To:
      IPBlock:
        CIDR: 172.59.0.0/16
        Except: 172.59.1.0/24, 172.59.2.0/24
    To:
      IPBlock:
        CIDR: 172.60.0.0/16
        Except: 172.60.1.0/24, 172.60.2.0/24
    To:
      NamespaceSelector: envt=test2,project=myproject2
    To:
      NamespaceSelector: envt=qa2,project=yourproject2
    To:
      PodSelector: envt=test2,role=frontend2
    To:
      PodSelector: envt=qa2,role=backend2
  Policy Types: Ingress, Egress
controlplane $
